{"version":3,"file":"static/js/299.0c74c345.chunk.js","mappings":"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","sources":["../../node_modules/@remix-run/router/history.ts","../../node_modules/@remix-run/router/utils.ts","../../node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n  reloadDocument?: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (args: LoaderFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (args: ActionFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  ActionFunction,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  AgnosticRouteObject,\n  DataResult,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  ImmutableRouteKey,\n  LoaderFunction,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) return true;\n      // Explicitly opting-in to running on hydration\n      if (m.route.loader.hydrate === true) return false;\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors: pendingError || null,\n          ...(pendingActionData ? { actionData: pendingActionData } : {}),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData\n            ? Object.keys(actionData).length === 0\n              ? { actionData: null }\n              : { actionData }\n            : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true,\n    });\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  v7_relativeSplatPath: boolean,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location,\n          v7_relativeSplatPath\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse: QueryRouteResponse = {\n        type:\n          resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result,\n      };\n      throw queryRouteResponse;\n    }\n\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || obj.type === ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","entries","initialEntries","initialIndex","v5Compat","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","getUrlBasedHistory","window","globalHistory","usr","createHashHistory","substr","startsWith","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","invariant","value","message","Error","cond","console","warn","e","getHistoryState","idx","current","_extends","random","toString","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","history","getIndex","handlePop","origin","replaceState","addEventListener","removeEventListener","historyState","pushState","error","DOMException","name","assign","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","route","treePath","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","siblings","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","caseSensitive","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","keyMatch","optional","param","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","reject","pendingKeysSet","subscribers","deferredKeys","Array","isArray","this","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","_tracked","isTrackedPromise","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","initialized","dataRoutes","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","hasLazyRoutes","m","lazy","hasLoaders","loader","errors","isRouteInitialized","hydrate","findIndex","pendingNavigationController","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","deleteFetcher","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","currentLocation","toPaths","getSavedScrollPosition","async","startNavigation","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","enableViewTransition","routesToUse","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","submission","pendingActionData","pendingError","request","createClientSideRequest","findNearestBoundary","actionOutput","interruptActiveLoads","getSubmittingNavigation","actionMatch","getTargetMatch","callLoaderOrAction","shortCircuited","type","method","routeId","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","handleAction","getLoadingNavigation","Request","fetcherSubmission","initialHydration","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","handleLoaders","_temp2","revalidate","redirectLocation","isDocumentReload","reloadDocument","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","updateFetcherState","setFetcherError","getFetcher","markFetchersDone","doneFetcher","getDoneFetcher","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","_ref4","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","y","initialize","_window","transitions","sessionPositions","sessionStorage","getItem","parse","restoreAppliedTransitions","_saveAppliedTransitions","setItem","persistAppliedTransitions","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","userReplace","unstable_viewTransition","fetch","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","revalidationRequest","loadId","loadFetcher","staleKey","handleFetcherAction","resolveDeferredData","handleFetcherLoader","count","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","Symbol","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","body","isSubmissionNavigation","isValidMethod","searchParams","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","convertFormDataToSearchParams","convertSearchParamsToFormData","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","isInitialLoad","values","currentUrl","nextUrl","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","context","requestContext","handlerError","isResponse","isStaticRequest","protocol","isSameBasename","isRouteRequest","contentType","statusCode","deferred","isDeferredData","_result$init","_result$init2","processRouteLoaderData","foundError","loaderHeaders","newLoaderData","mergedLoaderData","hasOwnProperty","reverse","find","_temp5","errorMessage","signals","isRevalidatingLoader","unwrap","getAll"],"sourceRoot":""}