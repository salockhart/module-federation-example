{"version":3,"file":"static/js/597.e82125fa.chunk.js","mappings":"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","sources":["../node_modules/react-router-dom/dom.ts","../node_modules/react-router-dom/index.tsx"],"sourcesContent":["import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename, UNSAFE_warning as warning } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n\n  return searchParams;\n}\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\nexport type SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | JsonValue\n  | null;\n\n// One-time check for submitter support\nlet _formDataSupportsSubmitter: boolean | null = null;\n\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(\n        document.createElement(\"form\"),\n        // @ts-expect-error if FormData supports the submitter parameter, this will throw\n        0\n      );\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The encoding used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * Enable flushSync for this navigation's state updates\n   */\n  unstable_flushSync?: boolean;\n\n  /**\n   * Enable view transitions on this submission navigation\n   */\n  unstable_viewTransition?: boolean;\n}\n\nconst supportedFormEncTypes: Set<FormEncType> = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\",\n]);\n\nfunction getFormEncType(encType: string | null) {\n  if (encType != null && !supportedFormEncTypes.has(encType as FormEncType)) {\n    warning(\n      false,\n      `\"${encType}\" is not a valid \\`encType\\` for \\`<Form>\\`/\\`<fetcher.Form>\\` ` +\n        `and will default to \"${defaultEncType}\"`\n    );\n\n    return null;\n  }\n  return encType;\n}\n\nexport function getFormSubmissionInfo(\n  target: SubmitTarget,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData | undefined;\n  body: any;\n} {\n  let method: string;\n  let action: string | null;\n  let encType: string;\n  let formData: FormData | undefined;\n  let body: any;\n\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n\n    formData = new FormData(target);\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n\n    method =\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      getFormEncType(target.getAttribute(\"formenctype\")) ||\n      getFormEncType(form.getAttribute(\"enctype\")) ||\n      defaultEncType;\n\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let { name, type, value } = target;\n      if (type === \"image\") {\n        let prefix = name ? `${name}.` : \"\";\n        formData.append(`${prefix}x`, \"0\");\n        formData.append(`${prefix}y`, \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData, body };\n}\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport type {\n  DataRouteObject,\n  FutureConfig,\n  Location,\n  NavigateOptions,\n  NavigationType,\n  Navigator,\n  RelativeRoutingType,\n  RouteObject,\n  RouterProviderProps,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n  UNSAFE_useRoutesImpl as useRoutesImpl,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig as RouterFutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n  RouterState,\n  RouterSubscriber,\n  BlockerFunction,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  UNSAFE_ErrorResponseImpl as ErrorResponseImpl,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n  matchPath,\n  IDLE_FETCHER,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n  SubmitTarget,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  Blocker,\n  BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  ErrorResponse,\n  Fetcher,\n  FutureConfig,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathParam,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  ShouldRevalidateFunctionArgs,\n  To,\n  UIMatch,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  redirectDocument,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n  var __reactRouterVersion: string;\n  interface Document {\n    startViewTransition(cb: () => Promise<void> | void): ViewTransition;\n  }\n}\n\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"0\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<RouterFutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    window: opts?.window,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    window: opts?.window,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponseImpl(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Contexts\n////////////////////////////////////////////////////////////////////////////////\n\ntype ViewTransitionContextObject =\n  | {\n      isTransitioning: false;\n    }\n  | {\n      isTransitioning: true;\n      flushSync: boolean;\n      currentLocation: Location;\n      nextLocation: Location;\n    };\n\nconst ViewTransitionContext = React.createContext<ViewTransitionContextObject>({\n  isTransitioning: false,\n});\nif (__DEV__) {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\n\nexport { ViewTransitionContext as UNSAFE_ViewTransitionContext };\n\n// TODO: (v7) Change the useFetcher data from `any` to `unknown`\ntype FetchersContextObject = Map<string, any>;\n\nconst FetchersContext = React.createContext<FetchersContextObject>(new Map());\nif (__DEV__) {\n  FetchersContext.displayName = \"Fetchers\";\n}\n\nexport { FetchersContext as UNSAFE_FetchersContext };\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\n\nfunction startTransitionSafe(cb: () => void) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\n\nfunction flushSyncSafe(cb: () => void) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\n\ninterface ViewTransition {\n  finished: Promise<void>;\n  ready: Promise<void>;\n  updateCallbackDone: Promise<void>;\n  skipTransition(): void;\n}\n\nclass Deferred<T> {\n  status: \"pending\" | \"resolved\" | \"rejected\" = \"pending\";\n  promise: Promise<T>;\n  // @ts-expect-error - no initializer\n  resolve: (value: T) => void;\n  // @ts-expect-error - no initializer\n  reject: (reason?: unknown) => void;\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = (value) => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = (reason) => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n  future,\n}: RouterProviderProps): React.ReactElement {\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState<RouterState>();\n  let [vtContext, setVtContext] = React.useState<ViewTransitionContextObject>({\n    isTransitioning: false,\n  });\n  let [renderDfd, setRenderDfd] = React.useState<Deferred<void>>();\n  let [transition, setTransition] = React.useState<ViewTransition>();\n  let [interruption, setInterruption] = React.useState<{\n    state: RouterState;\n    currentLocation: Location;\n    nextLocation: Location;\n  }>();\n  let fetcherData = React.useRef<Map<string, any>>(new Map());\n  let { v7_startTransition } = future || {};\n\n  let optInStartTransition = React.useCallback(\n    (cb: () => void) => {\n      if (v7_startTransition) {\n        startTransitionSafe(cb);\n      } else {\n        cb();\n      }\n    },\n    [v7_startTransition]\n  );\n\n  let setState = React.useCallback<RouterSubscriber>(\n    (\n      newState: RouterState,\n      {\n        deletedFetchers,\n        unstable_flushSync: flushSync,\n        unstable_viewTransitionOpts: viewTransitionOpts,\n      }\n    ) => {\n      deletedFetchers.forEach((key) => fetcherData.current.delete(key));\n      newState.fetchers.forEach((fetcher, key) => {\n        if (fetcher.data !== undefined) {\n          fetcherData.current.set(key, fetcher.data);\n        }\n      });\n\n      let isViewTransitionUnavailable =\n        router.window == null ||\n        typeof router.window.document.startViewTransition !== \"function\";\n\n      // If this isn't a view transition or it's not available in this browser,\n      // just update and be done with it\n      if (!viewTransitionOpts || isViewTransitionUnavailable) {\n        if (flushSync) {\n          flushSyncSafe(() => setStateImpl(newState));\n        } else {\n          optInStartTransition(() => setStateImpl(newState));\n        }\n        return;\n      }\n\n      // flushSync + startViewTransition\n      if (flushSync) {\n        // Flush through the context to mark DOM elements as transition=ing\n        flushSyncSafe(() => {\n          // Cancel any pending transitions\n          if (transition) {\n            renderDfd && renderDfd.resolve();\n            transition.skipTransition();\n          }\n          setVtContext({\n            isTransitioning: true,\n            flushSync: true,\n            currentLocation: viewTransitionOpts.currentLocation,\n            nextLocation: viewTransitionOpts.nextLocation,\n          });\n        });\n\n        // Update the DOM\n        let t = router.window!.document.startViewTransition(() => {\n          flushSyncSafe(() => setStateImpl(newState));\n        });\n\n        // Clean up after the animation completes\n        t.finished.finally(() => {\n          flushSyncSafe(() => {\n            setRenderDfd(undefined);\n            setTransition(undefined);\n            setPendingState(undefined);\n            setVtContext({ isTransitioning: false });\n          });\n        });\n\n        flushSyncSafe(() => setTransition(t));\n        return;\n      }\n\n      // startTransition + startViewTransition\n      if (transition) {\n        // Interrupting an in-progress transition, cancel and let everything flush\n        // out, and then kick off a new transition from the interruption state\n        renderDfd && renderDfd.resolve();\n        transition.skipTransition();\n        setInterruption({\n          state: newState,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      } else {\n        // Completed navigation update with opted-in view transitions, let 'er rip\n        setPendingState(newState);\n        setVtContext({\n          isTransitioning: true,\n          flushSync: false,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      }\n    },\n    [router.window, transition, renderDfd, fetcherData, optInStartTransition]\n  );\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred<void>());\n    }\n  }, [vtContext]);\n\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({ isTransitioning: false });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (\n      renderDfd &&\n      pendingState &&\n      state.location.key === pendingState.location.key\n    ) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation,\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n\n  React.useEffect(() => {\n    warning(\n      fallbackElement == null || !router.future.v7_partialHydration,\n      \"`<RouterProvider fallbackElement>` is deprecated when using \" +\n        \"`v7_partialHydration`, use a `HydrateFallback` component instead\"\n    );\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <FetchersContext.Provider value={fetcherData.current}>\n            <ViewTransitionContext.Provider value={vtContext}>\n              <Router\n                basename={basename}\n                location={state.location}\n                navigationType={state.historyAction}\n                navigator={navigator}\n                future={{\n                  v7_relativeSplatPath: router.future.v7_relativeSplatPath,\n                }}\n              >\n                {state.initialized || router.future.v7_partialHydration ? (\n                  <DataRoutes\n                    routes={router.routes}\n                    future={router.future}\n                    state={state}\n                  />\n                ) : (\n                  fallbackElement\n                )}\n              </Router>\n            </ViewTransitionContext.Provider>\n          </FetchersContext.Provider>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nfunction DataRoutes({\n  routes,\n  future,\n  state,\n}: {\n  routes: DataRouteObject[];\n  future: RemixRouter[\"future\"];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state, future);\n}\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  future,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({\n  basename,\n  children,\n  future,\n  window,\n}: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({\n  basename,\n  children,\n  future,\n  history,\n}: HistoryRouterProps) {\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n  unstable_viewTransition?: boolean;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      unstable_viewTransition,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n      unstable_viewTransition,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\ntype NavLinkRenderProps = {\n  isActive: boolean;\n  isPending: boolean;\n  isTransitioning: boolean;\n};\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?: React.ReactNode | ((props: NavLinkRenderProps) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?: string | ((props: NavLinkRenderProps) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: NavLinkRenderProps) => React.CSSProperties | undefined);\n}\n\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      unstable_viewTransition,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator, basename } = React.useContext(NavigationContext);\n    let isTransitioning =\n      routerState != null &&\n      // Conditional usage is OK here because the usage of a data router is static\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useViewTransitionState(path) &&\n      unstable_viewTransition === true;\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    if (nextLocationPathname && basename) {\n      nextLocationPathname =\n        stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n    }\n\n    // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n    // we're looking for a slash _after_ what's in `to`.  For example:\n    //\n    // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n    // both want to look for a / at index 6 to match URL `/users/matt`\n    const endSlashPosition =\n      toPathname !== \"/\" && toPathname.endsWith(\"/\")\n        ? toPathname.length - 1\n        : toPathname.length;\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(endSlashPosition) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let renderProps = {\n      isActive,\n      isPending,\n      isTransitioning,\n    };\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp(renderProps);\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n        isTransitioning ? \"transitioning\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n        unstable_viewTransition={unstable_viewTransition}\n      >\n        {typeof children === \"function\" ? children(renderProps) : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FetcherFormProps\n  extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * `<form encType>` - enhancing beyond the normal string type and limiting\n   * to the built-in browser supported values\n   */\n  encType?:\n    | \"application/x-www-form-urlencoded\"\n    | \"multipart/form-data\"\n    | \"text/plain\";\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\nexport interface FormProps extends FetcherFormProps {\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Enable view transitions on this Form navigation\n   */\n  unstable_viewTransition?: boolean;\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (\n    {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmit();\n    let formAction = useFormAction(action, { relative });\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        fetcherKey,\n        method: submitMethod,\n        navigate,\n        replace,\n        state,\n        relative,\n        preventScrollReset,\n        unstable_viewTransition,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmit = \"useSubmit\",\n  UseSubmitFetcher = \"useSubmitFetcher\",\n  UseFetcher = \"useFetcher\",\n  useViewTransitionState = \"useViewTransitionState\",\n}\n\nenum DataRouterStateHook {\n  UseFetcher = \"useFetcher\",\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\n// Internal hooks\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n// External hooks\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n    unstable_viewTransition?: boolean;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, {\n          replace,\n          state,\n          preventScrollReset,\n          relative,\n          unstable_viewTransition,\n        });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n      unstable_viewTransition,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\nexport type SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Submits a fetcher `<form>` to the server without reloading the page.\n */\nexport interface FetcherSubmitFunction {\n  (\n    target: SubmitTarget,\n    // Fetchers cannot replace or set state because they are not navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"state\">\n  ): void;\n}\n\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\n      \"You are calling submit during the server render. \" +\n        \"Try calling submit within a `useEffect` or callback instead.\"\n    );\n  }\n}\n\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => `__${String(++fetcherId)}__`;\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback<SubmitFunction>(\n    (target, options = {}) => {\n      validateClientSideSubmission();\n\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n\n      if (options.navigate === false) {\n        let key = options.fetcherKey || getUniqueFetcherId();\n        router.fetch(key, currentRouteId, options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          unstable_flushSync: options.unstable_flushSync,\n        });\n      } else {\n        router.navigate(options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          replace: options.replace,\n          state: options.state,\n          fromRouteId: currentRouteId,\n          unstable_flushSync: options.unstable_flushSync,\n          unstable_viewTransition: options.unstable_viewTransition,\n        });\n      }\n    },\n    [router, basename, currentRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    if (params.has(\"index\") && params.get(\"index\") === \"\") {\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: React.ForwardRefExoticComponent<\n    FetcherFormProps & React.RefAttributes<HTMLFormElement>\n  >;\n  submit: FetcherSubmitFunction;\n  load: (href: string, opts?: { unstable_flushSync?: boolean }) => void;\n};\n\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>({\n  key,\n}: { key?: string } = {}): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(RouteContext);\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n\n  invariant(fetcherData, `useFetcher must be used inside a FetchersContext`);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState<string>(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  // Fetcher additions\n  let load = React.useCallback(\n    (href: string, opts?: { unstable_flushSync?: boolean }) => {\n      invariant(routeId, \"No routeId available for fetcher.load()\");\n      router.fetch(fetcherKey, routeId, href, opts);\n    },\n    [fetcherKey, routeId, router]\n  );\n\n  let submitImpl = useSubmit();\n  let submit = React.useCallback<FetcherSubmitFunction>(\n    (target, opts) => {\n      submitImpl(target, {\n        ...opts,\n        navigate: false,\n        fetcherKey,\n      });\n    },\n    [fetcherKey, submitImpl]\n  );\n\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = React.forwardRef<HTMLFormElement, FetcherFormProps>(\n      (props, ref) => {\n        return (\n          <Form {...props} navigate={false} fetcherKey={fetcherKey} ref={ref} />\n        );\n      }\n    );\n    if (__DEV__) {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form: FetcherForm,\n      submit,\n      load,\n      ...fetcher,\n      data,\n    }),\n    [FetcherForm, submit, load, fetcher, data]\n  );\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): (Fetcher & { key: string })[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(([key, fetcher]) => ({\n    ...fetcher,\n    key,\n  }));\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let { basename } = React.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      try {\n        sessionStorage.setItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n          JSON.stringify(savedScrollPositions)\n        );\n      } catch (error) {\n        warning(\n          false,\n          `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`\n        );\n      }\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename: GetScrollRestorationKeyFunction | undefined =\n        getKey && basename !== \"/\"\n          ? (location, matches) =>\n              getKey(\n                // Strip the basename to match useLocation()\n                {\n                  ...location,\n                  pathname:\n                    stripBasename(location.pathname, basename) ||\n                    location.pathname,\n                },\n                matches\n              )\n          : getKey;\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKeyWithoutBasename\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(\n          decodeURIComponent(location.hash.slice(1))\n        );\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({\n  when,\n  message,\n}: {\n  when: boolean | BlockerFunction;\n  message: string;\n}) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(\n  to: To,\n  opts: { relative?: RelativeRoutingType } = {}\n) {\n  let vtContext = React.useContext(ViewTransitionContext);\n\n  invariant(\n    vtContext != null,\n    \"`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" +\n      \"Did you accidentally import `RouterProvider` from `react-router`?\"\n  );\n\n  let { basename } = useDataRouterContext(\n    DataRouterHook.useViewTransitionState\n  );\n  let path = useResolvedPath(to, { relative: opts.relative });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n\n  let currentPath =\n    stripBasename(vtContext.currentLocation.pathname, basename) ||\n    vtContext.currentLocation.pathname;\n  let nextPath =\n    stripBasename(vtContext.nextLocation.pathname, basename) ||\n    vtContext.nextLocation.pathname;\n\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" unstable_viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" unstable_viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return (\n    matchPath(path.pathname, nextPath) != null ||\n    matchPath(path.pathname, currentPath) != null\n  );\n}\n\nexport { useViewTransitionState as unstable_useViewTransitionState };\n\n//#endregion\n"],"names":["defaultMethod","defaultEncType","isHtmlElement","object","tagName","createSearchParams","init","URLSearchParams","Array","isArray","Object","keys","reduce","memo","key","value","concat","map","v","_formDataSupportsSubmitter","supportedFormEncTypes","Set","getFormEncType","encType","has","getFormSubmissionInfo","target","basename","method","action","formData","body","toLowerCase","attr","getAttribute","stripBasename","FormData","isButtonElement","isInputElement","type","form","Error","document","createElement","e","isFormDataSubmitterSupported","name","prefix","append","undefined","window","__reactRouterVersion","createBrowserRouter","routes","opts","createRouter","future","_extends","v7_prependBasename","history","createBrowserHistory","hydrationData","parseHydrationData","UNSAFE_mapRouteProperties","initialize","createHashRouter","createHashHistory","_window","state","__staticRouterHydrationData","errors","deserializeErrors","entries","serialized","val","__type","UNSAFE_ErrorResponseImpl","status","statusText","data","internal","__subType","ErrorConstructor","error","message","stack","ViewTransitionContext","React","isTransitioning","FetchersContext","Map","startTransitionImpl","flushSyncImpl","ReactDOM","useIdImpl","flushSyncSafe","cb","Deferred","constructor","this","promise","Promise","resolve","reject","reason","RouterProvider","_ref","fallbackElement","router","setStateImpl","pendingState","setPendingState","vtContext","setVtContext","renderDfd","setRenderDfd","transition","setTransition","interruption","setInterruption","fetcherData","v7_startTransition","optInStartTransition","startTransitionSafe","setState","newState","_ref2","deletedFetchers","unstable_flushSync","flushSync","unstable_viewTransitionOpts","viewTransitionOpts","forEach","current","delete","fetchers","fetcher","set","isViewTransitionUnavailable","startViewTransition","skipTransition","currentLocation","nextLocation","t","finished","finally","subscribe","renderPromise","async","location","navigator","createHref","encodeLocation","go","n","navigate","push","to","preventScrollReset","replace","dataRouterContext","static","UNSAFE_DataRouterContext","Provider","UNSAFE_DataRouterStateContext","Router","navigationType","historyAction","v7_relativeSplatPath","initialized","v7_partialHydration","DataRoutes","_ref3","UNSAFE_useRoutesImpl","BrowserRouter","_ref4","children","historyRef","v5Compat","listen","HashRouter","_ref5","HistoryRouter","_ref6","isBrowser","ABSOLUTE_URL_REGEX","Link","_ref7","ref","absoluteHref","onClick","relative","reloadDocument","unstable_viewTransition","rest","_objectWithoutPropertiesLoose","_excluded","UNSAFE_NavigationContext","isExternal","test","currentUrl","URL","href","targetUrl","startsWith","protocol","path","pathname","origin","search","hash","useHref","internalOnClick","useLinkClickHandler","event","defaultPrevented","NavLink","_ref8","ariaCurrentProp","caseSensitive","className","classNameProp","end","style","styleProp","_excluded2","useResolvedPath","useLocation","routerState","useViewTransitionState","toPathname","locationPathname","nextLocationPathname","navigation","endSlashPosition","endsWith","length","isActive","charAt","isPending","renderProps","ariaCurrent","filter","Boolean","join","Form","_ref9","forwardedRef","fetcherKey","onSubmit","props","_excluded3","submit","useSubmit","formAction","useFormAction","formMethod","preventDefault","submitter","nativeEvent","submitMethod","currentTarget","ScrollRestoration","_ref10","getKey","storageKey","useScrollRestoration","DataRouterHook","DataRouterStateHook","useDataRouterContext","hookName","ctx","UNSAFE_invariant","useDataRouterState","_temp","replaceProp","useNavigate","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","shouldProcessLinkClick","createPath","useSearchParams","defaultInit","defaultSearchParamsRef","hasSetSearchParamsRef","searchParams","locationSearch","defaultSearchParams","_","getAll","getSearchParamsForLocation","setSearchParams","nextInit","navigateOptions","newSearchParams","fetcherId","getUniqueFetcherId","String","UseSubmit","currentRouteId","UNSAFE_useRouteId","options","validateClientSideSubmission","fetch","formEncType","fromRouteId","_temp2","routeContext","UNSAFE_RouteContext","match","matches","slice","params","get","toString","route","index","joinPaths","useFetcher","_temp3","_route$matches","UseFetcher","routeId","id","defaultKey","setFetcherKey","getFetcher","deleteFetcher","load","submitImpl","FetcherForm","IDLE_FETCHER","useFetchers","UseFetchers","from","_ref11","SCROLL_RESTORATION_STORAGE_KEY","savedScrollPositions","_temp4","UseScrollRestoration","restoreScrollPosition","useMatches","useNavigation","scrollRestoration","callback","capture","addEventListener","removeEventListener","usePageHide","scrollY","sessionStorage","setItem","JSON","stringify","sessionPositions","getItem","parse","getKeyWithoutBasename","disableScrollRestoration","enableScrollRestoration","el","getElementById","decodeURIComponent","scrollIntoView","scrollTo","useBeforeUnload","usePrompt","_ref12","when","blocker","useBlocker","confirm","setTimeout","proceed","reset","currentPath","nextPath","matchPath"],"sourceRoot":""}